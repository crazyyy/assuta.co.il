/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$sprite-israel-name: 'sprite-israel';
$sprite-israel-x: 0px;
$sprite-israel-y: 0px;
$sprite-israel-offset-x: 0px;
$sprite-israel-offset-y: 0px;
$sprite-israel-width: 30px;
$sprite-israel-height: 23px;
$sprite-israel-total-width: 60px;
$sprite-israel-total-height: 46px;
$sprite-israel-image: '../img/sprite.png';
$sprite-israel: (0px, 0px, 0px, 0px, 30px, 23px, 60px, 46px, '../img/sprite.png', 'sprite-israel', );
$sprite-kazakhstan-name: 'sprite-kazakhstan';
$sprite-kazakhstan-x: 30px;
$sprite-kazakhstan-y: 0px;
$sprite-kazakhstan-offset-x: -30px;
$sprite-kazakhstan-offset-y: 0px;
$sprite-kazakhstan-width: 30px;
$sprite-kazakhstan-height: 23px;
$sprite-kazakhstan-total-width: 60px;
$sprite-kazakhstan-total-height: 46px;
$sprite-kazakhstan-image: '../img/sprite.png';
$sprite-kazakhstan: (30px, 0px, -30px, 0px, 30px, 23px, 60px, 46px, '../img/sprite.png', 'sprite-kazakhstan', );
$sprite-russian-name: 'sprite-russian';
$sprite-russian-x: 0px;
$sprite-russian-y: 23px;
$sprite-russian-offset-x: 0px;
$sprite-russian-offset-y: -23px;
$sprite-russian-width: 30px;
$sprite-russian-height: 23px;
$sprite-russian-total-width: 60px;
$sprite-russian-total-height: 46px;
$sprite-russian-image: '../img/sprite.png';
$sprite-russian: (0px, 23px, 0px, -23px, 30px, 23px, 60px, 46px, '../img/sprite.png', 'sprite-russian', );
$sprite-ukraine-name: 'sprite-ukraine';
$sprite-ukraine-x: 30px;
$sprite-ukraine-y: 23px;
$sprite-ukraine-offset-x: -30px;
$sprite-ukraine-offset-y: -23px;
$sprite-ukraine-width: 30px;
$sprite-ukraine-height: 20px;
$sprite-ukraine-total-width: 60px;
$sprite-ukraine-total-height: 46px;
$sprite-ukraine-image: '../img/sprite.png';
$sprite-ukraine: (30px, 23px, -30px, -23px, 30px, 20px, 60px, 46px, '../img/sprite.png', 'sprite-ukraine', );
$spritesheet-width: 60px;
$spritesheet-height: 46px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($sprite-israel, $sprite-kazakhstan, $sprite-russian, $sprite-ukraine, );
$spritesheet: (60px, 46px, '../img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
